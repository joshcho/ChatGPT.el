#+TITLE: ChatGPT.el

[[https://chat.openai.com/chat][ChatGPT]] in Emacs.

- [[https://www.youtube.com/watch?v=4oUrm4CnIjo][Basic Demo]]
- [[https://www.youtube.com/watch?v=1LMlt5Cv4fY][Queue Demo]]

** Installation
*** Dependency
#+begin_src shell
pip install sexpdata==0.0.3
pip install epc
pip install git+https://github.com/mmabrouk/chatgpt-wrapper
chatgpt install
#+end_src

This will prompt you to log in with your browser.

NOTE: If you encounter any problems, please submit an issue or see [[https://github.com/mmabrouk/chatgpt-wrapper][chatgpt-wrapper]].

*** [[https://github.com/radian-software/straight.el][Straight]]
#+begin_src emacs-lisp
(use-package chatgpt
  :straight (:host github :repo "joshcho/ChatGPT.el" :files ("dist" "*.el"))
  :init
  (require 'python)
  (setq chatgpt-repo-path "~/.emacs.d/straight/repos/ChatGPT.el/")
  :bind ("C-c q" . chatgpt-query))
#+end_src

*** [[https://github.com/quelpa/quelpa][Quelpa]]
#+begin_src emacs-lisp
(require 'quelpa-use-package)
(use-package chatgpt
  :quelpa ((chatgpt :fetcher git :url "https://github.com/joshcho/ChatGPT.el.git") :upgrade t)
  :init
  (require 'python)
  (setq chatgpt-repo-path (expand-file-name "chatgpt/" quelpa-build-dir))
  :bind ("C-c q" . chatgpt-query))
#+end_src

*** [[https://www.spacemacs.org/][Spacemacs]]

In ~dotspacemacs/user-config~ function,
#+begin_src emacs-lisp
(require 'python)
(setq chatgpt-repo-path (expand-file-name "chatgpt/" quelpa-build-dir))
(global-set-key (kbd "C-c q") #'chatgpt-query)
#+end_src

In ~dotspacemacs/layers~ function for ~setq-default~,
#+begin_src emacs-lisp
dotspacemacs-additional-packages
'(
  (chatgpt :location (recipe
                      :fetcher github
                      :repo "joshcho/ChatGPT.el"))
  ;; other additional packages...
  )
#+end_src

NOTE: Assumes Quelpa installation.

*** [[https://github.com/doomemacs/doomemacs][Doom Emacs]]

In ~packages.el~ ,
#+begin_src emacs-lisp
(package! chatgpt
  :recipe (:host github :repo "joshcho/ChatGPT.el" :files ("dist" "*.el")))
#+end_src

In ~config.el~ ,
#+begin_src emacs-lisp
(use-package! chatgpt
  :defer t
  :config
  (unless (boundp 'chatgpt-python-interpreter)
    (defvaralias 'chatgpt-python-interpreter 'python-shell-interpreter))
  (setq chatgpt-repo-path (expand-file-name "straight/repos/ChatGPT.el/" doom-local-dir))
  (set-popup-rule! (regexp-quote "*ChatGPT*")
    :side 'bottom :size .5 :ttl nil :quit t :modeline nil)
  :bind ("C-c q" . chatgpt-query))
#+end_src

** Usage
- Press ~C-c q~ to query ChatGPT.
- Select region, then ~C-c q~ will prompt you to select a type: doc, bug, understand, or improve. Select a type to query ChatGPT with that prompt.
- Try making queries in quick succession.
- If your login is expired, try
#+begin_src sh
pkill ms-playwright/firefox && chatgpt install
#+end_src
in the shell.
- To reset your conversation, try M-x chatgpt-reset.

** Troubleshooting

- For most scenarios, the reliable method is ~pkill ms-playwright/firefox && chatgpt install~ to reauthenticate yourself.
- Also try M-x chatgpt-reset.
- If for some reason the ellipses keep blinking, try M-x chatgpt-stop.
- Make sure you have python installed, and ~chatgpt-python-interpreter~ is set (most likely set it to "python" or "python3").
- If none of these methods work, please submit an [[https://github.com/joshcho/ChatGPT.el/issues/new][issue]].

** Customization
Customize ~chatgpt-query-format-string-map~ for your own types.

#+begin_src emacs-lisp
(setq chatgpt-query-format-string-map '(
                                        ;; ChatGPT.el defaults
                                        ("doc" . "Please write the documentation for the following function.\n\n%s")
                                        ("bug" . "There is a bug in the following function, please help me fix it.\n\n%s")
                                        ("understand" . "What does the following function do?\n\n%s")
                                        ("improve" . "Please improve the following code.\n\n%s")
                                        ;; your new prompt
                                        ("my-custom-type" . "My custom prompt.\n\n%s")))
#+end_src

~chatgpt-ensure-pip-install~

Whether to automatically install the python chatgpt-wrapper package using
pip if not detected in default ~pip list~. You might want to set this to
~nil~ if youâ€™re providing a custom ~chatgpt-python-interpreter~ (that
points to a dedicated Python virtualenv for chatgpt-wrapper, for example).

#+begin_src emacs-lisp
(setq chatgpt-ensure-pip-install nil)
#+end_src


** Misc.
- Don't use "custom" as a type. It's reserved for custom prepend string through minibuffer.
- See [[https://github.com/suonlight/ob-chatgpt][ob-chatgpt]] which builds on top of ChatGPT.el.
- Check out [[https://github.com/semiosis/pen.el][Pen.el]]
